define(["app/util"],e=>{"use strict";let r=null,o=null,s=null,t=()=>{let e=location.host;return("https:"===window.location.protocol?"wss:":"ws:")+"//"+e+"/ws/map/update"},a=()=>"/public/js/"+e.getVersion()+"/app/worker/map.js",n=()=>"/public/js/"+e.getVersion()+"/app/worker/message.js",c=e=>{r instanceof SharedWorker?e instanceof window.MsgWorker?r.port.postMessage(e):console.error("MsgWorkerSend must be instance of window.MsgWorker"):console.error("SharedWorker thread not found")};return{getWebSocketURL:t,init:e=>{s=parseInt(e.characterId),requirejs([n()],()=>{o=window.MsgWorker,(r=new SharedWorker(a(),n())).port.addEventListener("message",r=>{let s=r.data;switch(Object.setPrototypeOf(s,o.prototype),s.command){case"ws:open":e.callbacks.onOpen(s);break;case"ws:send":e.callbacks.onGet(s);break;case"ws:closed":e.callbacks.onClosed(s);break;case"ws:error":e.callbacks.onError(s)}},!1),r.onerror=(r=>{let s=new o("sw:error");s.meta({reason:"Could not connect to SharedWorker: "+a()}),e.callbacks.onError(s)}),r.port.start();let l=new o("sw:init");e.callbacks.onInit(l),(()=>{let e=new o("ws:init");e.data({uri:t(),characterId:s}),c(e)})()})},send:(e,r)=>{let s=new o("ws:send");s.task(e),s.data(r),c(s)},close:()=>{if(o){let e=new o("sw:closePort");e.task("unsubscribe"),c(e)}}}});
//# sourceMappingURL=worker.js.map
