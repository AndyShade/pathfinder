define(["easyTimer","app/promises/promise.timeout"],(t,e)=>{"use strict";let s=class Task{constructor(t,e,s=null){if("string"!=typeof t)throw new TypeError('Task "name" must be instance of String, Type of "'+typeof t+'" given');this._config=Object.assign({},this.constructor.defaultConfig,e),this._name=t,this._task=((t,e)=>{}),this._manager=s,this._runCount=0,this._runQueue=new Map,this._lastTotalTimeValues=void 0}get name(){return this._name}get task(){return this._task}set task(t){if(!(t instanceof Function))throw new TypeError('Task "task" must be instance of "function", Type of "'+typeof t+'" given');this._task=t}get runCount(){return this._runCount}get precision(){return this.get("precision")}get paused(){return this.get("paused")}get targetAchieved(){return!!this.get("targetRunCount")&&this.runCount>=this.get("targetRunCount")}get targetProgress(){return parseFloat(parseFloat(this.get("targetRunCount")&&this.runCount?100/this.get("targetRunCount")*this.runCount:0).toFixed(2))}get(t){return this._config[t]}set(t,e){this._config[t]=e}connect(t=this._manager){if(!(t instanceof i))throw new TypeError('Parameter must be instance of CronManager. Type of "'+typeof t+'" given');t!==this._manager&&(this.disconnect(),this._manager=t),this._manager.set(this)}disconnect(t=this._manager){if(!(t instanceof i))throw new TypeError('Parameter must be instance of CronManager. Type of "'+typeof t+'" given');this.isConnected(t)&&this._manager.delete(this._name)}isConnected(t=this._manager){return t instanceof i&&t===this._manager&&t.has(this._name)}isRunning(){return!!this._runQueue.size}isDue(t){if(this.get("dueDate")instanceof Date){if((new Date).getTime()>=this.get("dueDate").getTime())return!0}else{let e=t.getTotalTimeValues()[this.precision];if(e-=this._lastTotalTimeValues?this._lastTotalTimeValues[this.precision]:0,1===this.get("interval")||e%this.get("interval")==0)return!0}return!1}invoke(t){this.paused||!this.isDue(t)||this.isRunning()&&!this.get("isParallel")||this.run(t)}run(t){this._lastTotalTimeValues=Object.assign({},t.getTotalTimeValues());let s="run_"+ ++this._runCount,i=e=>{e(this._task(t,this))},n=this.get("timeout")>0?new e(i,this.get("timeout")):new Promise(i);n.then(t=>{}).catch(t=>{t instanceof Error&&console.warn(t)}).finally(()=>{this._runQueue.delete(s),this.get("dueDate")instanceof Date&&this.disconnect(),this.targetAchieved&&this.stop()}),this._runQueue.set(s,n)}start(){this.set("paused",!1),this.connect()}stop(){this.reset(),this.disconnect()}pause(){this.set("paused",!0)}reset(){this._runCount=0}};s.defaultConfig={precision:"seconds",isParallel:!1,interval:1,dueDate:void 0,timeout:50,paused:!1,targetRunCount:0};let i=class CronManager{constructor(e){this._config=Object.assign({},this.constructor.defaultConfig,e),this._timerConfig=Object.assign({},this.constructor.defaultTimerConfig),this._tasks=new Map,this._timer=new t.Timer,this._config.precisions.map(t=>t+"Updated").forEach(t=>{this._timer.on(t,t=>{let e=t.type.substring(0,t.type.indexOf("Updated"));this.tasksByPrecision(e).forEach(e=>e.invoke(t.detail.timer))})}),this.debug=((t,...e)=>{this._config.debug&&(e=e||[],console.debug(t,...e))})}new(t,e){return new s(t,e,this)}set(t){if(!(t instanceof s))throw new TypeError("Parameter must be instance of Task");this.has(t.name)||(this._tasks.set(t.name,t),t.connect(this),this.debug("SET/UPDATE task: %o config: %o",t.name,t),this.auto())}setNew(t,e){this.set(this.new(t,e))}get(t){return this._tasks.get(t)}has(t){return this._tasks.has(t)}delete(t){if(this.has(t)){let e=this._tasks.get(t);this._tasks.delete(t),e.disconnect(this),this.debug("DELETE task: %o",t),this.auto()}}clear(){this.debug("CLEAR all  %o task(s)",this._tasks.size),this._tasks.clear(),this.auto()}tasksByPrecision(t){let e=[];return this._tasks.forEach(s=>{t===s.precision&&e.push(s)}),e}start(){this._timer.start(this._timerConfig)}stop(){this._timer.stop()}pause(){this._timer.pause()}reset(){this._timer.reset()}auto(){this._tasks.size?this._timer.isRunning()||(this.start(),this.debug("START [auto] timer. %o task(s) found.",this._tasks.size)):(this.stop(),this.debug("STOP [auto] timer. No tasks set."))}};return i.defaultConfig={precisions:["secondTenths","seconds","minutes","hours","days"],debug:!1},i.defaultTimerConfig={precision:"secondTenths",countdown:!1},new i({debug:!1})});
//# sourceMappingURL=cron.js.map
